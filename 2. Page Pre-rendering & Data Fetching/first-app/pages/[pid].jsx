import fs from 'fs/promises';
import path from 'path';

const ProductDetailPage = ({ loadedProduct }) => {
  if (!loadedProduct) {
    return <p>Loading ...</p>;
  }

  return (
    <>
      <h1>{loadedProduct.title}</h1>
      <p>{loadedProduct.description}</p>;
    </>
  );
};

export const getStaticProps = async (context) => {
  const { params } = context;

  const productId = params.pid;

  const filePath = path.join(process.cwd(), 'data', 'dummy-backend.json');
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);

  const product = data.products.find((item) => item.id === productId);

  return {
    props: {
      loadedProduct: product,
    },
  };
};

export const getStaticPaths = async () => {
  return {
    paths: [
      { params: { pid: 'p1' } },
      // { params: { pid: 'p2' } },
      // { params: { pid: 'p3' } },
    ],
    fallback: true, //if you do not want to pre-generate some of pages because they are visited rarely you can add fallback
    // when they will be generated by server when visiting
    //alternatively you can do fallback: 'blocking' and not create fallback component but page will be freezed before generating and user
    // will have to wait
  };
};

export default ProductDetailPage;
